{"version":3,"sources":["RespondButton.jsx","responseTypes.js","App.js","serviceWorker.js","index.js"],"names":["RespondButton","props","display","color","height","link","linkUrl","Row","className","Col","Button","style","href","responses","App","mainDisplayConfig","ht_vh","length","mainDisplay","map","b","idx","actionDisplayConfig","actionDisplay","Container","fluid","basename","Switch","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2QAIe,SAASA,EAAcC,GAAQ,IACpCC,EAAiCD,EAAjCC,QAASC,EAAwBF,EAAxBE,MAAOC,EAAiBH,EAAjBG,OAAQC,EAASJ,EAATI,KAE1BC,EAAUD,EAAI,WAAOA,GAAS,GAElC,OACI,kBAACE,EAAA,EAAD,CAAKC,UAAU,QACX,kBAACC,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,CACIF,UAAS,wBAAmBL,EAAnB,oBACTQ,MAAO,CAAEP,OAAO,GAAD,OAAKA,EAAL,OACfQ,KAAMP,GAAQC,GAEd,0BAAME,UAAU,gBAAgBN,MClB7C,IAAMW,EACH,MADGA,EAEJ,KAFIA,EAGE,6CAHFA,EAKA,eALAA,EAMD,eANCA,EAOM,UAPNA,EAUJ,e,uBC2CMC,MA5Cf,WACI,IAAIC,EAAoB,CACpB,CAAEb,QAASW,EAAeV,MAAO,WACjC,CAAED,QAASW,EAAcV,MAAO,UAChC,CAAED,QAASW,EAAmBV,MAAO,cAErCa,EAAQ,IAAMD,EAAkBE,OAAS,GAEzCC,EAAeH,EAAkBI,KAAI,SAACC,EAAGC,GAAJ,OACrC,kBAACrB,EAAD,CAAeE,QAASkB,EAAElB,QAASC,MAAOiB,EAAEjB,MAAOC,OAAQY,OAG3DM,EAAsB,CACtB,CAAEpB,QAASW,EAAkBV,MAAO,aACpC,CAAED,QAASW,EAAwBV,MAAO,SAC1C,CAAED,QAASW,EAAcV,MAAO,aAChC,CAAED,QAASW,EAAiBV,MAAO,UAGnCoB,EAAiBD,EAAoBH,KAAI,SAACC,EAAGC,GAAJ,OACzC,kBAACrB,EAAD,CAAeE,QAASkB,EAAElB,QAASC,MAAOiB,EAAEjB,MAAOC,OAAQ,IAAMkB,EAAoBL,OAAS,QAIlG,OACI,oCACI,kBAACO,EAAA,EAAD,CAAWC,OAAK,EAACjB,UAAU,6CACvB,kBAAC,IAAD,CAAQkB,SAAS,6BACb,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,YACbX,EACD,kBAAClB,EAAD,CAAeE,QAAQ,UAAUC,MAAM,YAAYC,OAAQY,EAAQ,IAAKX,KAAK,aAEjF,kBAAC,IAAD,CAAOwB,KAAK,YACPN,EACD,kBAACvB,EAAD,CAAeE,QAAQ,eAAKC,MAAM,YAAYC,OAAQY,EAAQ,IAAKX,KAAK,kBChChFyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5475b7e9.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Col, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nexport default function RespondButton(props) {\n    let { display, color, height, link } = props;\n\n    let linkUrl = link ? `/${link}` : \"\";\n\n    return (\n        <Row className=\"my-1\">\n            <Col>\n\n                <Button\n                    className={`btn-block btn-${color} respond__button`}\n                    style={{ height: `${height}vh` }}\n                    href={link && linkUrl}\n                >\n                    <span className=\"button__text\">{display}</span>\n                </Button>\n\n            </Col>\n        </Row>\n    )\n}\n","export const responses = {\n    \"yes\":\"YES\",\n    \"no\":\"NO\",\n    \"notSure\": \"🤷🏻‍♂️\",\n    \"options\":[1,2,3,4],\n    \"toilet\":\"🚽\",\n    \"sleep\":\"💤\",\n    \"massageChair\":\"Massage\",\n    \"stand\":\"Stand\",\n    \"sit\":\"Sit\",\n    \"tv\":\"📺\",\n    \"left\":\"LEFT\",\n    \"right\":\"RIGHT\",\n}","import React from 'react';\nimport './App.css';\nimport { Button, Row, Container, Col } from 'react-bootstrap';\nimport RespondButton from './RespondButton';\nimport { responses } from './responseTypes'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Switch from 'react-bootstrap/esm/Switch';\n\n\nfunction App() {\n    let mainDisplayConfig = [\n        { display: responses.yes, color: \"success\" },\n        { display: responses.no, color: \"danger\" },\n        { display: responses.notSure, color: \"secondary\" },\n    ];\n    let ht_vh = 90 / (mainDisplayConfig.length + 1);\n\n    let mainDisplay = (mainDisplayConfig.map((b, idx) => (\n        <RespondButton display={b.display} color={b.color} height={ht_vh} />\n    )))\n\n    let actionDisplayConfig = [\n        { display: responses.toilet, color: \"secondary\" },\n        { display: responses.massageChair, color: \"light\" },\n        { display: responses.tv, color: \"secondary\" },\n        { display: responses.sleep, color: \"light\" },\n    ]\n\n    let actionDisplay = (actionDisplayConfig.map((b, idx) => (\n        <RespondButton display={b.display} color={b.color} height={90 / (actionDisplayConfig.length + 1)} />\n    ))\n    )\n\n    return (\n        <>\n            <Container fluid className=\"d-flex flex-column justify-content-around\">\n                <Router basename=\"http://siu-sing.github.io\">\n                    <Switch>\n                        <Route exact path=\"/respond\">\n                            {mainDisplay}\n                            <RespondButton display=\"Actions\" color=\"secondary\" height={ht_vh / 1.8} link=\"actions\" />\n                        </Route>\n                        <Route path=\"/actions\">\n                            {actionDisplay}\n                            <RespondButton display=\"🔙\" color=\"secondary\" height={ht_vh / 1.8} link=\"respond\" />\n                        </Route>\n                    </Switch>\n                </Router>\n            </Container>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}